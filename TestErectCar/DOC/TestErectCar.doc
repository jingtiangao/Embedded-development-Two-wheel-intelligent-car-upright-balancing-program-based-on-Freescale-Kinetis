=============================================================================
List of generated methods in project: TestErectCar

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "SCI"       (bean AsynchroMaster)
   - SCI_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does not 
                wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the preferred 
                method to handle error and break exception in the interrupt mode is to use events <OnError> and <OnBreak> the 
                return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the information about an 
                exception in interrupt mode is returned only if there is a valid character ready to be read.
   - SCI_SendChar -Send one character to the channel. This method is available only if the transmitter property is enabled.
   - SCI_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the receiver 
                property is enabled.
   - SCI_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.
   - SCI_SelectSlave -Select the slave - sends the address of the slave for starting communication with it (the previous slave 
                stops communicating).
   - SCI_GetSelected -Return the identification of the selected slave  (0-254, or -1 if no slave is selected).
   - SCI_SetIdle -Sends the idle character to the output line.  This method is available only if the transmitter property is 
                enabled.

Module "I2C1"      (bean InternalI2C)
   - I2C1_SendChar -When working as a MASTER, this method writes one (7-bit addressing) or two (10-bit addressing) slave 
                address bytes inclusive of R/W bit = 0 to the I2C bus and then writes one character (byte) to the bus. The 
                slave address must be specified before, by the "SelectSlave" or "SelectSlave10" method or in the component 
                initialization section, "Target slave address init" property. If interrupt service is enabled and the method 
                returns ERR_OK, it doesn't mean that transmission was successful. The state of transmission is obtainable from 
                (OnTransmitData, OnError or OnArbitLost) events.   When working as a SLAVE, this method writes a character to 
                the internal output slave buffer and, after the master starts the communication, to the I2C bus. If no 
                character is ready for a transmission (internal output slave buffer is empty), the Empty character will be sent 
                (see "Empty character" property).
   - I2C1_RecvChar -When working as a MASTER, this method writes one (7-bit addressing) or two (10-bit addressing) slave 
                address bytes inclusive of R/W bit = 1 to the I2C bus, then reads one character (byte) from the bus and then 
                sends the stop condition. The slave address must be specified before, by the "SelectSlave" or "SelectSlave10" 
                method or in component initialization section, property "Target slave address init". If interrupt service is 
                enabled and the method returns ERR_OK, it doesn't mean that transmission was finished successfully. The state 
                of transmission must be tested by means of events (OnReceiveData, OnError or OnArbitLost). In case of 
                successful transmission, received data is ready after OnReceiveData event is called.   When working as a SLAVE, 
                this method reads a character from the input slave buffer.
   - I2C1_SendBlock -When working as a MASTER, this method writes one (7-bit addressing) or two (10-bit addressing) slave 
                address bytes inclusive of R/W bit = 0 to the I2C bus and then writes the block of characters to the bus. The 
                slave address must be specified before, by the "SelectSlave" or "SlaveSelect10" method or in component 
                initialization section, "Target slave address init" property. If interrupt service is enabled and the method 
                returns ERR_OK, it doesn't mean that transmission was successful. The state of transmission is detectable by 
                means of events (OnTransmitData, OnError or OnArbitLost). Data to be send is not copied to an internal buffer 
                and remains in the original location. Therefore the content of the buffer should not be changed until the 
                transmission is complete. Event OnTransmitData can be used to detect the end of the transmission.  When working 
                as a SLAVE, this method writes a block of characters to the internal output slave buffer and then, after the 
                master starts the communication, to the I2C bus. If no character is ready for a transmission (internal output 
                slave buffer is empty), the "Empty character" will be sent (see "Empty character" property). In SLAVE mode the 
                data are copied to an internal buffer, if specified by "Output buffer size" property.
   - I2C1_RecvBlock -When working as a MASTER, this method writes one (7-bit addressing) or two (10-bit addressing) slave 
                address bytes inclusive of R/W bit = 1 to the I2C bus, then reads the block of characters from the bus and then 
                sends the stop condition. The slave address must be specified before, by the "SelectSlave" or "SelectSlave10" 
                method or in component initialization section, "Target slave address init" property. If interrupt service is 
                enabled and the method returns ERR_OK, it doesn't mean that transmission was finished successfully. The state 
                of transmission must be tested by means of events (OnReceiveData, OnError or OnArbitLost). In case of 
                successful transmission, received data is ready after OnReceiveData event is called.   When working as a SLAVE, 
                this method reads a block of characters from the input slave buffer.
   - I2C1_SelectSlave -This method selects a new slave for communication by its 7-bit slave address value. Any send or receive 
                method directs to or from selected device, until a new slave device is selected by this method. This method is 
                not available for the SLAVE mode.

Module "ADC"       (bean ADC)
   - ADC_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note: If the 
                <number of conversions> is more than one the conversion of A/D channels is performed specified number of times.)
   - ADC_GetValue16 -This method returns the last measured values of all channels justified to the left. Compared with 
                <GetValue> method this method returns more accurate result if the <number of conversions> is greater than 1 and 
                <AD resolution> is less than 16 bits. In addition, the user code dependency on <AD resolution> is eliminated.

Module "TI1"       (bean TimerInt)

Module "PWMC1"     (bean PWMMC)
   - PWMC1_SetDuty -Setting duty (value) register(s) of selected channel. The value is loaded after calling <Load> method.   
                Version specific information for Freescale 56800/E and HC08 and HCS12 and HCS12X derivatives ]   Setting is 
                valid for actual speed mode only, initial value is restored after speed mode change.   Version specific 
                information for Freescale HCS08 and ColdFireV1 derivatives  In center-align mode it is necessary to set both 
                odd and event duty registers separatelly. ]   Duty register(s) value is not affected during speed mode change. 
                It should be handled by the user code.   Version specific information for Freescale 56800/E derivatives - 
                eFlexPWM device ]   Duty register(s) value is not affected during speed mode change. It should be handled by 
                the user code.
   - PWMC1_Load -Apply last setting of the methods <SetDuty>, <SetDutyPercent>, both <SetRatio*>, <SetPeriod> and 
                <SetPrescaler>.   Version specific information for Freescale HCS08 and ColdFireV1 derivatives ]   On FTM 
                peripheral on HCS08 and ColdFireV1 derivatives, <SetPrescaler> is applied immediately and it is not affected by 
                this method.
   - PWMC1_SetRatio16 -This method sets a new duty-cycle ratio for selected channel. The value is loaded after calling <Load> 
                method.   Version specific information for Freescale 56800/E and HC08 and HCS12 and HCS12X derivatives ]   
                Setting is valid for actual speed mode only, initial value is restored after speed mode change.   Version 
                specific information for Freescale HCS08 and ColdFireV1 derivatives ]   Settings is not affected during speed 
                mode change. It should be handled by the user code.   Version specific information for Freescale 56800/E 
                derivatives - eFlexPWM device ]   Settings is not affected during speed mode change. It should be handled by 
                the user code.
   - PWMC1_SetRatio15 -This method sets a new duty-cycle ratio for selected channel. The value is loaded after calling <Load> 
                method.   Version specific information for Freescale 56800/E and HC08 and HCS12 and HCS12X derivatives ]   
                Setting is valid for actual speed mode only, initial value is restored after speed mode change.   Version 
                specific information for Freescale HCS08 and ColdFireV1 derivatives ]   Settings is not affected during speed 
                mode change. It should be handled by the user code.   Version specific information for Freescale 56800/E 
                derivatives - eFlexPWM device ]   Settings is not affected during speed mode change. It should be handled by 
                the user code.
   - PWMC1_OutputPadEnable -Method enables output pads.
   - PWMC1_OutputPadDisable -Method disables output pads.

Module "LED"       (bean BitIO)
   - LED_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - LED_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - LED_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or a 
                register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - LED_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - LED_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "COUNTER2"  (bean EventCntr16)
   - COUNTER2_Reset -This method resets the external event counter (sets it to zero).
   - COUNTER2_GetNumEvents -This method returns the number of the external events.

Module "MOTOR1DIR" (bean ExtInt)
   - MOTOR1DIR_GetVal -Returns the actual value of the input pin of the component.

Module "COUNTER1"  (bean EventCntr16)
   - COUNTER1_Reset -This method resets the external event counter (sets it to zero).
   - COUNTER1_GetNumEvents -This method returns the number of the external events.

Module "MOTOR2DIR" (bean ExtInt)
   - MOTOR2DIR_GetVal -Returns the actual value of the input pin of the component.

Module "MOTOR1DIRVAL" (bean BitIO)
   - MOTOR1DIRVAL_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].

Module "MOTOR2DIRVAL" (bean BitIO)
   - MOTOR2DIRVAL_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].

Module "RC1"       (bean InputPin)
   - RC1_GetVal -Return the value of the Input bean.

Module "RC2"       (bean InputPin)
   - RC2_GetVal -Return the value of the Input bean.

Module "RC3"       (bean InputPin)
   - RC3_GetVal -Return the value of the Input bean.

Module "RC4"       (bean InputPin)
   - RC4_GetVal -Return the value of the Input bean.

Module "Cpu"       (bean 56F8013VFAE)
   - Cpu_EnableInt -Enables all maskable interrupts
   - Cpu_DisableInt -Disables all maskable interrupts
   - Cpu_SetWaitMode -Sets low power mode - Wait mode.  For more information about the wait mode see this CPU documentation.  
                Release from wait mode: Reset or interrupt
   - Cpu_SetStopMode -Sets low power mode - Stop mode.  For more information about the stop mode see this CPU documentation.

===================================================================================
